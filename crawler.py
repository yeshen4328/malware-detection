import urllib2
import codecs
from lxml import etree
import lxml.html as HTML

def parseclass(url):
    res = urllib2.urlopen(url)
    webContent = res.read();
    webContent = webContent.split('\n')
def parseReturnType(nodes):
    returntype = []
    for node in nodes:
        link = node.xpath("./a[@href]")
        if(link == []):
            fulltype = node.xpath("./text()")[0].encode('utf-8').replace(' ','').replace('\n','')
            returntype.append(fulltype)
        else:
            retres = urllib2.urlopen(link)
            con = retres.read();
            tree = etree.HTML(con)
            tmp = tree.xpath("//table[@class='jd-inheritance-table']/tr[2]/td[2]/text()")[0].encode('utf-8').replace(' ','').replace('\n','')
            returntype.append(tmp)
    return returntype
def getFullType(links, fullname):
    types = []
    i = 1
    for link in links:
        if(i == 1):
            i = 0
            continue
        res = urllib2.urlopen(link)
        con = res.read();
        tree = etree.HTML(con)
        tmp = tree.xpath("//table[@class='jd-inheritance-table']/tr[2]/td[2]/text()")[0].encode('utf-8').strip()
        types.append(tmp)
    comp = fullname.replace('(',' ').replace(',','').replace(')','').strip().split(' ')
    p = 1
    oriparas = []
    while(p < len(comp)):# extract the parameter in the original methods
        oriparas.append(comp[p])
        p = p + 2
    for i in range(len(oriparas)):#repalce with full methods type
        if(oriparas[i] in types[i]):
            oriparas[i] = types[i]
    p = 1
    i = 0
    while(p < len(comp)):#construct original method with full type, without '(', ')'
        comp[p] = oriparas[i]
        p = p + 2
        i = i + 1
    reconstruct = ""
    p = 1
    i = 0
    reconstruct = reconstruct + comp[0]#change list to string
    reconstruct = reconstruct + '('
    while(p < len(comp)):
        reconstruct = reconstruct + comp[p]
        reconstruct = reconstruct + ' '
        reconstruct = reconstruct + comp[p + 1]
        if(p + 2 < len(comp)):
            reconstruct = reconstruct +', '
        p = p + 2
    reconstruct = reconstruct +')'

    return reconstruct

def main():
    url = 'https://developer.android.google.cn/reference/packages.html'
    res = urllib2.urlopen(url)
    fout = open("apis.txt",'w')

    webContent = res.read();
    res.close()
    packagetree = etree.HTML(webContent)
    hrefs = packagetree.xpath("//table/tr/td[1]/a/@href")
    # names = htree.xpath("//table/tr/td/a/@href")
    i = 1
    for href in hrefs:
        if i == 1:
            i = i + 1
            continue
        res_class = urllib2.urlopen(href)
        html_class = res_class.read()
        classtree = etree.HTML(html_class)
        link2class = classtree.xpath("//table[2]/tr/td[1]/a/@href")
        for link in link2class:
            public_apis = []
            res_methods = urllib2.urlopen(link)
            html_methods = res_methods.read()
            methods_tree = etree.HTML(html_methods)
            public_methods = methods_tree.xpath("//table[@id='pubmethods']/tr/td[2]/code") #get methods from table
            className = methods_tree.xpath("//table[@class='jd-inheritance-table']/tr[2]/td[2]/text()")[0].encode('utf-8').replace(' ','').replace('\n','')
            fullmethods = []
            for code in public_methods:
                method_name = code.xpath('string(.)').encode('utf-8').strip()
                method_link = code.xpath("./a/@href")
                oneFullMethod = method_name
                #oneFullMethod = getFullType(method_link, method_name)
                fullmethods.append(oneFullMethod)
            fullRetTypes = return_type = methods_tree.xpath("//table[@id='pubmethods']/tr/td[1]/code/text()") #get return type from table

            #fullRetTypes = parseReturnType(return_type)#get full return type

            for i in range(len(fullmethods)):
                fout.write(className + ": " + fullRetTypes[i] + fullmethods[i]+"\n")
                print(className + ": " + fullRetTypes[i].replace('\n','').replace(' ','') + ' ' +fullmethods[i]+"\n")
    fout.close()
if __name__ == "__main__":
    main()

